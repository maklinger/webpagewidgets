## Micromamba environment
Environment needed to run the python code to generate the files:
```shell
micromamba create -f environment.yaml  
micromamba activate webpagewidgets    
```


## Overview page

add for each project to the `projects.yaml`:
```yaml
projects:
  - name: "Synchrotron Convolution"
    path: "projects/SynchrotronConvolution/output/index.html"
    image: "projects/SynchrotronConvolution/preview.png"
    description: "Visualise the relation between electron spectra and the corresponding synchrotron spectra."
```
add a preview image.
then run python script for the overview page:
```shell
python generate_index.py
```


## Widget page
1. Create a `config.yaml` in `projects/projectname/`
2. fill in info
```yaml
# title
project_name: Field Lines of an orbiting charge

# python files used
# they must return a json with lists for everything to be plotted
backend_files: # relative to output/ folder
  - ../calcFieldLines.py  
  - ../field_calculations.py 

# python packages (need to be available in pyodide)
python_packages:
  - numpy
  - scipy
  - micropip

# needed to be able to use plotly global import
js_packages:
  - plotly

# define functions to be called
# args: arguments (same names as corresponding slider id)
# trigger: for every slider/element that should trigger the function execution
# updates: which plots to update
functions:
  calcFieldLines:
    args: [ti, lgbG, frac_Ax_lim, frac_Ay_lim, resolution, Nlines, lgfmax]
    trigger:
      - control: "ti"
        event: "input"
      - control: "lgbG"
        event: "input"
      - control: "frac_Ax_lim"
        event: "input"
      - control: "frac_Ay_lim"
        event: "input"
      - control: "resolution"
        event: "input"
      - control: "Nlines"
        event: "input"
      - control: "lgfmax"
        event: "input"
    updates: [plot_fields]

# all ui elements (slider, plot, text, button)
elements:
  - id: ti
    type: slider
    label: time slice index
    min: 0
    max: 99
    step: 1
    value: 0
  - id: lgbG
    type: slider
    label: momentum (\(\beta\Gamma\))
    min: -5
    max: 5
    step: 0.1
    value: 0
    scale: log10 
....
  - id: plot_fields
    type: plot
    plotter: ../FieldLinePlotter.js 
    library: plotly.js
    title: Electric field amplitude
    x_label: "x [m]"
    y_label: "y [m]"
    cbar_label: "Field strength [V/m]"
    width: 600
    height: 500

# how elements from above should be arranged in webpage
layout:
  VerticalBox:
    - HorizontalBox: [plot_fields]
    - HorizontalBox: 
      - VerticalBox: [lgbG, frac_Ax_lim, frac_Ay_lim, ti]
      - VerticalBox: [resolution, Nlines, lgfmax]



```
Two base plotters can be used (either via Chart.js or Plotly.js). Make one inherited plotter class for each plot.


then run for a widget page, e.g.:
```shell
python generate_ui.py projects/SynchrotronConvolution/config.yaml
```

## Test locally

Start the python server:
```shell
python -m http.server 8000
```

Then you can open in the browser:
`http://localhost:8000/projects/movingChargeFieldLines/output/index.html`

## Github pages
All needed is to push to the main branch