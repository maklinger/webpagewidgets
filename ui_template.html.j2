<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>{{ project_name }}</title>
  <style>
    body { font-family: sans-serif; margin: 2em; }

    .slider-container { margin-bottom: 1em; }

    .vbox {
      display: flex;
      flex-direction: column;
      gap: 1em;
    }

    .hbox {
      display: flex;
      flex-direction: row;
      align-items: center;
      gap: 1em;
    }

    canvas {
      border: 1px solid #ddd;
      border-radius: 8px;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
  </style>
</head>
<body>

  <h1>{{ project_name }}</h1>

    <div id="main_ui">
      {{ layout_html | safe }}
    </div>

  <script type="module">


  import { loadPyodide } from "https://cdn.jsdelivr.net/pyodide/v0.25.0/full/pyodide.mjs";
  const pyodide = await loadPyodide();
  console.log("✅ Pyodide loaded");
  // Redirect Python print to JS console
  pyodide.setStdout({
    batched: (s) => console.log(s)
  });
  pyodide.setStderr({
    batched: (s) => console.error(s)
  });


  // Load required Python packages from YAML
  const pkgs = {{ python_packages | tojson }};
  for (const pkg of pkgs) {
    console.log(`📦 Loading ${pkg} ...`);
    try {
      await pyodide.loadPackage(pkg);
    } catch (err) {
      console.warn(`⚠️ Could not load ${pkg} automatically, trying micropip`);
      const micropip = pyodide.pyimport("micropip");
      await micropip.install(pkg);
    }
  }

  // Import the plotters
  console.log("Import plotter");
  {% for path, varname in plotter_vars.items() %}
  const {{ varname }} = await import("{{ path }}");
  {% endfor %}

  // Load Python files relative to index.html
  console.log("Load python files");
  {% for f in backend_files %}
  const src_{{ loop.index }} = await (await fetch("{{ f }}")).text();
  pyodide.runPython(src_{{ loop.index }});
  {% endfor %}


  // define the function - argument mapping
  console.log("Define functions");
  const functions = {{ functions | tojson }};


  const charts = {};
  {% for pid, meta in plots.items() %}
  charts["{{ pid }}"] = new {{ meta.varname }}.{{ meta.varname }}("{{ pid }}", {
    x_label: "{{ meta.x_label }}",
    y_label: "{{ meta.y_label }}",
    title: "{{ meta.title }}"
  });
  {% endfor %}


  async function runFunction(funcName) {
    console.log("Running" + funcName);
    const meta = functions[funcName];
    const args = meta.args.map(id => {
        const el = document.getElementById(id);
        const val = parseFloat(el.value);
        return `${id}=${val}`;
    });
    const pyCall = `${funcName}(${args.join(", ")})`;
    const jsonResult = await pyodide.runPythonAsync(pyCall);
    const result = JSON.parse(jsonResult);
    
    
    if (meta.updates && Array.isArray(meta.updates)) {
      for (const pid of meta.updates) {
        const chart = charts[pid];
        if (chart && typeof chart.render === "function") {
            //console.log(`Updating plot: ${pid}`);
            chart.render(result);
        } //else {
        //    console.warn(`No renderable chart found for '${pid}'`);
        //}
      }
    }

  }


  {% for fname, fmeta in functions.items() %}
    {% for trig in fmeta.trigger %}
  document.getElementById('{{ trig.control }}')
          .addEventListener('{{ trig.event }}', () => runFunction('{{ fname }}'));
    {% endfor %}
  runFunction('{{ fname }}');
  {% endfor %}

  
  </script>

</body>
</html>
